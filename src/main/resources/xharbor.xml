<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:${conf:xharbor}.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    
    <bean id="source" class="org.jocean.j2se.spring.BeanProxy">
        <constructor-arg value="org.jocean.event.api.EventReceiverSource"/>
    </bean>
    
    <bean id="bytesPool" class="org.jocean.idiom.pool.Pools" 
        factory-method="createCachedBytesPool">
        <constructor-arg value="${pool.bytes.blockSize:10240}"/>
    </bean>
 
<!--         final HttpStack httpStack = new HttpStack(
              Pools.createCachedBytesPool(10240), 
                source, 
                new NettyClient(4), 
                100);
 -->
 
    <bean id="httpStack" class="org.jocean.httpclient.HttpStack">
        <constructor-arg ref="bytesPool"/>
        <constructor-arg ref="source"/>
        <constructor-arg>
            <bean class="org.jocean.netty.NettyClient">
                <constructor-arg value="${gateway.connector.processThreadNumber:4}"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="${gateway.connector.maxConnection:1000}"/>
    </bean>
    
    <bean id="relayAgent" class="org.jocean.xharbor.relay.RelayAgentImpl">
        <constructor-arg ref="httpStack" />
        <constructor-arg ref="source" />
    </bean>
    
    <bean id="httpServer" class="org.jocean.xharbor.HttpGatewayServer"
        init-method="start" destroy-method="stop">
        <property name="relayAgent" ref="relayAgent"/>
        <property name="acceptPort" value="${gateway.port:8080}" />
        <property name="acceptIp" value="${gateway.ip:0.0.0.0}" />
        <property name="logByteStream" value="${gateway.log.byteStream:false}"/>
        <property name="idleTimeSeconds" value="${gateway.idleTimeSeconds:200}"/>
     </bean>
     
    <bean id="zkClient" class="org.apache.curator.framework.CuratorFrameworkFactory" 
        factory-method="newClient"
        init-method="start">
        <constructor-arg value="${zk.address:121.41.45.51:2181}"/>
        <constructor-arg>
            <bean class="org.apache.curator.retry.ExponentialBackoffRetry">
                <constructor-arg value="1000"/>
                <constructor-arg value="3"/>
            </bean>
        </constructor-arg>
    </bean>
        
    <bean id="updaterRules" class="org.jocean.j2se.spring.BeanProxy">
        <constructor-arg value="org.jocean.idiom.Visitor"/>
    </bean>
    
    <bean id="updater" class="org.jocean.xharbor.route.RulesZKUpdater">
        <constructor-arg ref="source"/>
        <constructor-arg ref="zkClient"/>
        <constructor-arg value="${zk.rules.path:/demo}"/>
        <constructor-arg ref="updaterRules"/>
    </bean>
    
<!--         final CuratorFramework client = 
                CuratorFrameworkFactory.newClient("121.41.45.51:2181", 
                        new ExponentialBackoffRetry(1000, 3));
        client.start();
        
        final RulesZKUpdater updater = new RulesZKUpdater(source, client, "/demo", new Visitor<RoutingInfo2URIs>() {
            @Override
            public void visit(final RoutingInfo2URIs rules) throws Exception {
                cachedRouter.updateRouter(rules);
            }});
 -->

    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter"
          lazy-init="false">
        <property name="beans">
            <map>
                <entry key="org.jocean:name=bytesPool" value-ref="bytesPool"/>
                <entry key="org.jocean:name=httpStack" value-ref="httpStack"/>
            </map>
        </property>
    </bean>
     
</beans>
